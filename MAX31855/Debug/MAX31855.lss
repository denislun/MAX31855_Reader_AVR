
MAX31855.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000002da  0000034e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000e8  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d51  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000064e  00000000  00000000  000011e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000588  00000000  00000000  00001835  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000254  00000000  00000000  00001dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000037c  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000096c  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c0  00000000  00000000  00002cfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <avr/interrupt.h>
#include <avr/sleep.h>
#include <stdlib.h>

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0x6>
  9c:	00 d0       	rcall	.+0      	; 0x9e <main+0x8>
  9e:	1f 92       	push	r1
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
	uart0_init();
  a4:	0e 94 10 01 	call	0x220	; 0x220 <uart0_init>
	spi_master_init();
  a8:	0e 94 05 01 	call	0x20a	; 0x20a <spi_master_init>
	max31855_init();
  ac:	0e 94 7a 00 	call	0xf4	; 0xf4 <max31855_init>
	
	uart0_print("Testing MAX31855\r\n");
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	0e 94 24 01 	call	0x248	; 0x248 <uart0_print>
	int16_t rawdata;
	char printBuffer[5];
	
    while(1)
    {
        rawdata = max31855_read();
  b8:	0e 94 7d 00 	call	0xfa	; 0xfa <max31855_read>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  bc:	4a e0       	ldi	r20, 0x0A	; 10
  be:	be 01       	movw	r22, r28
  c0:	6f 5f       	subi	r22, 0xFF	; 255
  c2:	7f 4f       	sbci	r23, 0xFF	; 255
  c4:	0e 94 36 01 	call	0x26c	; 0x26c <__itoa_ncheck>
		
		itoa(rawdata, printBuffer, 10);
		
		uart0_print(printBuffer); uart0_print(", ");
  c8:	ce 01       	movw	r24, r28
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	0e 94 24 01 	call	0x248	; 0x248 <uart0_print>
  d0:	8d e2       	ldi	r24, 0x2D	; 45
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	0e 94 24 01 	call	0x248	; 0x248 <uart0_print>
		
		uart0_print("\r\n");
  d8:	80 e1       	ldi	r24, 0x10	; 16
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 24 01 	call	0x248	; 0x248 <uart0_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	81 ee       	ldi	r24, 0xE1	; 225
  e4:	94 e0       	ldi	r25, 0x04	; 4
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x50>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x5a>
  f0:	00 00       	nop
  f2:	e2 cf       	rjmp	.-60     	; 0xb8 <main+0x22>

000000f4 <max31855_init>:
#include "max31855.h"

void max31855_init()
{
	//Set CS Pin as an Output
	MAX31855_CS_DDR |= (1<<MAX_31855_CS_PIN_1);
  f4:	38 9a       	sbi	0x07, 0	; 7
	
	MAX31855_CS_PORT |= (1<<MAX_31855_CS_PIN_1);
  f6:	40 9a       	sbi	0x08, 0	; 8
  f8:	08 95       	ret

000000fa <max31855_read>:
}

uint16_t max31855_read()
{
  fa:	cf 92       	push	r12
  fc:	df 92       	push	r13
  fe:	ef 92       	push	r14
 100:	ff 92       	push	r15
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	28 97       	sbiw	r28, 0x08	; 8
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
	MAX31855_t max31855;
	uint8_t data[4];
	
	//Switch CS to low to initiate data transfer
	MAX31855_CS_PORT &= ~(1<<MAX_31855_CS_PIN_1);
 11a:	40 98       	cbi	0x08, 0	; 8
	
	//Get bits D31 to D24
	spi_master_transmit(0xFF);
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	0e 94 0b 01 	call	0x216	; 0x216 <spi_master_transmit>
	data[0] = SPDR;
 122:	0e b5       	in	r16, 0x2e	; 46
	
	//Get bits D23 to D16
	spi_master_transmit(0xFF);
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	0e 94 0b 01 	call	0x216	; 0x216 <spi_master_transmit>
	data[1] = SPDR;
 12a:	ee b4       	in	r14, 0x2e	; 46
	
	//Get bits D15 to D8
	spi_master_transmit(0xFF);
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	0e 94 0b 01 	call	0x216	; 0x216 <spi_master_transmit>
	data[2] = SPDR;
 132:	ce b4       	in	r12, 0x2e	; 46
	
	//Get bits D7 to D0
	spi_master_transmit(0xFF);
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	0e 94 0b 01 	call	0x216	; 0x216 <spi_master_transmit>
	data[3] = SPDR;
 13a:	de b4       	in	r13, 0x2e	; 46
	
	//Switch CS back to high to end data transfer
	MAX31855_CS_PORT |= (1<<MAX_31855_CS_PIN_1);
 13c:	40 9a       	sbi	0x08, 0	; 8
	
	#ifdef DEBUG_BUILD
	char buffer[8];
	uart0_print("Raw Value: ");
 13e:	83 e1       	ldi	r24, 0x13	; 19
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 24 01 	call	0x248	; 0x248 <uart0_print>
	itoa(data[0], buffer, 16); uart0_print(buffer); uart0_print(" ");
 146:	10 e0       	ldi	r17, 0x00	; 0
 148:	40 e1       	ldi	r20, 0x10	; 16
 14a:	be 01       	movw	r22, r28
 14c:	6f 5f       	subi	r22, 0xFF	; 255
 14e:	7f 4f       	sbci	r23, 0xFF	; 255
 150:	c8 01       	movw	r24, r16
 152:	0e 94 36 01 	call	0x26c	; 0x26c <__itoa_ncheck>
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	0e 94 24 01 	call	0x248	; 0x248 <uart0_print>
 15e:	8e e2       	ldi	r24, 0x2E	; 46
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 24 01 	call	0x248	; 0x248 <uart0_print>
	itoa(data[1], buffer, 16); uart0_print(buffer); uart0_print(" ");
 166:	f1 2c       	mov	r15, r1
 168:	40 e1       	ldi	r20, 0x10	; 16
 16a:	be 01       	movw	r22, r28
 16c:	6f 5f       	subi	r22, 0xFF	; 255
 16e:	7f 4f       	sbci	r23, 0xFF	; 255
 170:	c7 01       	movw	r24, r14
 172:	0e 94 36 01 	call	0x26c	; 0x26c <__itoa_ncheck>
 176:	ce 01       	movw	r24, r28
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	0e 94 24 01 	call	0x248	; 0x248 <uart0_print>
 17e:	8e e2       	ldi	r24, 0x2E	; 46
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 24 01 	call	0x248	; 0x248 <uart0_print>
 186:	40 e1       	ldi	r20, 0x10	; 16
 188:	be 01       	movw	r22, r28
 18a:	6f 5f       	subi	r22, 0xFF	; 255
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
 18e:	8c 2d       	mov	r24, r12
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 36 01 	call	0x26c	; 0x26c <__itoa_ncheck>
	itoa(data[2], buffer, 16); uart0_print(buffer); uart0_print(" ");
 196:	ce 01       	movw	r24, r28
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	0e 94 24 01 	call	0x248	; 0x248 <uart0_print>
 19e:	8e e2       	ldi	r24, 0x2E	; 46
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 24 01 	call	0x248	; 0x248 <uart0_print>
 1a6:	40 e1       	ldi	r20, 0x10	; 16
 1a8:	be 01       	movw	r22, r28
 1aa:	6f 5f       	subi	r22, 0xFF	; 255
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255
 1ae:	8d 2d       	mov	r24, r13
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 36 01 	call	0x26c	; 0x26c <__itoa_ncheck>
	itoa(data[3], buffer, 16); uart0_print(buffer); uart0_print(" ");
 1b6:	ce 01       	movw	r24, r28
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	0e 94 24 01 	call	0x248	; 0x248 <uart0_print>
 1be:	8e e2       	ldi	r24, 0x2E	; 46
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 24 01 	call	0x248	; 0x248 <uart0_print>
	uart0_print(", ");
 1c6:	8d e2       	ldi	r24, 0x2D	; 45
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 24 01 	call	0x248	; 0x248 <uart0_print>
	#endif
	
	//The two most significant bytes hold the thermocouple temp
	max31855.thermocoupleTemp = ((data[0]<<8)|(data[1]));
 1ce:	10 2f       	mov	r17, r16
 1d0:	00 27       	eor	r16, r16
 1d2:	0e 29       	or	r16, r14
 1d4:	1f 29       	or	r17, r15
	//Check if the value is negative
	if((max31855.thermocoupleTemp & 0x8000) == 0x8000)
		max31855.signBit = 1;

	//Check if the fault bit(Bit 16) is 1
	if((max31855.thermocoupleTemp & 0x0001) == 0x0001)
 1d6:	00 ff       	sbrs	r16, 0
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <max31855_read+0xe8>
	{
		max31855.faultBit = 1;
		#ifdef DEBUG_BUILD
		uart0_print("Fault Detected, ");
 1da:	8f e1       	ldi	r24, 0x1F	; 31
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 24 01 	call	0x248	; 0x248 <uart0_print>
	
	//Shift out bits D16 and D17	
	max31855.thermocoupleTemp = (max31855.thermocoupleTemp >> 2);
	
	return max31855.thermocoupleTemp;
 1e2:	c8 01       	movw	r24, r16
 1e4:	96 95       	lsr	r25
 1e6:	87 95       	ror	r24
 1e8:	96 95       	lsr	r25
 1ea:	87 95       	ror	r24
 1ec:	28 96       	adiw	r28, 0x08	; 8
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	08 95       	ret

0000020a <spi_master_init>:

******************************************************************/
void spi_master_init()
{
	/* Set MOSI and SCK output, while others as input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
 20a:	8c e2       	ldi	r24, 0x2C	; 44
 20c:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 20e:	81 e5       	ldi	r24, 0x51	; 81
 210:	8c bd       	out	0x2c, r24	; 44
	
	/* Set SPI Speed */
	SPSR = 0x00;
 212:	1d bc       	out	0x2d, r1	; 45
 214:	08 95       	ret

00000216 <spi_master_transmit>:

******************************************************************/
void spi_master_transmit(char cData)
{
	/* Start Transmission */
	SPDR = cData;
 216:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission to complete */
	while(!(SPSR & (1<<SPIF)));
 218:	0d b4       	in	r0, 0x2d	; 45
 21a:	07 fe       	sbrs	r0, 7
 21c:	fd cf       	rjmp	.-6      	; 0x218 <spi_master_transmit+0x2>
}
 21e:	08 95       	ret

00000220 <uart0_init>:
Initialize UART hardware 
******************************************************************/
void uart0_init()
{
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)/*|(1<<RXCIE0)*/;
 220:	88 e1       	ldi	r24, 0x18	; 24
 222:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8 bit data, 1 stop bit */
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	80 93 c2 00 	sts	0x00C2, r24
	
	/* Set baud rate */
	UBRR0H = (uint8_t)(UART0_UBRR>>8);
 22c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t) UART0_UBRR;
 230:	87 e6       	ldi	r24, 0x67	; 103
 232:	80 93 c4 00 	sts	0x00C4, r24
 236:	08 95       	ret

00000238 <uart0_tx>:
UART Transmit 
******************************************************************/
void uart0_tx(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while(!(UCSR0A & (1<<UDRE0)));
 238:	e0 ec       	ldi	r30, 0xC0	; 192
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	90 81       	ld	r25, Z
 23e:	95 ff       	sbrs	r25, 5
 240:	fd cf       	rjmp	.-6      	; 0x23c <uart0_tx+0x4>
	
	/* Put data into buffer, and send data */
	UDR0 = data;
 242:	80 93 c6 00 	sts	0x00C6, r24
 246:	08 95       	ret

00000248 <uart0_print>:

/***************************************************************** 
Write a null terminated string to UART
*****************************************************************/
void uart0_print(char *str)
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
	/* If string is empty or has reached the NULL terminator, 
		exit function */
	if(str==0 || *str == 0)
 24c:	00 97       	sbiw	r24, 0x00	; 0
 24e:	59 f0       	breq	.+22     	; 0x266 <uart0_print+0x1e>
 250:	fc 01       	movw	r30, r24
 252:	20 81       	ld	r18, Z
 254:	22 23       	and	r18, r18
 256:	39 f0       	breq	.+14     	; 0x266 <uart0_print+0x1e>
 258:	ec 01       	movw	r28, r24
	/* Each character of the string starting with the first
	character will be sent off into the USART buffer to be 
	transmitted until the string reaches the last character */
	do 
	{
		uart0_tx(*str++);
 25a:	89 91       	ld	r24, Y+
 25c:	0e 94 1c 01 	call	0x238	; 0x238 <uart0_tx>
	} while(*str!=0);	
 260:	88 81       	ld	r24, Y
 262:	81 11       	cpse	r24, r1
 264:	fa cf       	rjmp	.-12     	; 0x25a <uart0_print+0x12>
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <__itoa_ncheck>:
 26c:	bb 27       	eor	r27, r27
 26e:	4a 30       	cpi	r20, 0x0A	; 10
 270:	31 f4       	brne	.+12     	; 0x27e <__itoa_ncheck+0x12>
 272:	99 23       	and	r25, r25
 274:	22 f4       	brpl	.+8      	; 0x27e <__itoa_ncheck+0x12>
 276:	bd e2       	ldi	r27, 0x2D	; 45
 278:	90 95       	com	r25
 27a:	81 95       	neg	r24
 27c:	9f 4f       	sbci	r25, 0xFF	; 255
 27e:	0c 94 42 01 	jmp	0x284	; 0x284 <__utoa_common>

00000282 <__utoa_ncheck>:
 282:	bb 27       	eor	r27, r27

00000284 <__utoa_common>:
 284:	fb 01       	movw	r30, r22
 286:	55 27       	eor	r21, r21
 288:	aa 27       	eor	r26, r26
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	aa 1f       	adc	r26, r26
 290:	a4 17       	cp	r26, r20
 292:	10 f0       	brcs	.+4      	; 0x298 <__utoa_common+0x14>
 294:	a4 1b       	sub	r26, r20
 296:	83 95       	inc	r24
 298:	50 51       	subi	r21, 0x10	; 16
 29a:	b9 f7       	brne	.-18     	; 0x28a <__utoa_common+0x6>
 29c:	a0 5d       	subi	r26, 0xD0	; 208
 29e:	aa 33       	cpi	r26, 0x3A	; 58
 2a0:	08 f0       	brcs	.+2      	; 0x2a4 <__utoa_common+0x20>
 2a2:	a9 5d       	subi	r26, 0xD9	; 217
 2a4:	a1 93       	st	Z+, r26
 2a6:	00 97       	sbiw	r24, 0x00	; 0
 2a8:	79 f7       	brne	.-34     	; 0x288 <__utoa_common+0x4>
 2aa:	b1 11       	cpse	r27, r1
 2ac:	b1 93       	st	Z+, r27
 2ae:	11 92       	st	Z+, r1
 2b0:	cb 01       	movw	r24, r22
 2b2:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <strrev>

000002b6 <strrev>:
 2b6:	dc 01       	movw	r26, r24
 2b8:	fc 01       	movw	r30, r24
 2ba:	67 2f       	mov	r22, r23
 2bc:	71 91       	ld	r23, Z+
 2be:	77 23       	and	r23, r23
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <strrev+0x4>
 2c2:	32 97       	sbiw	r30, 0x02	; 2
 2c4:	04 c0       	rjmp	.+8      	; 0x2ce <strrev+0x18>
 2c6:	7c 91       	ld	r23, X
 2c8:	6d 93       	st	X+, r22
 2ca:	70 83       	st	Z, r23
 2cc:	62 91       	ld	r22, -Z
 2ce:	ae 17       	cp	r26, r30
 2d0:	bf 07       	cpc	r27, r31
 2d2:	c8 f3       	brcs	.-14     	; 0x2c6 <strrev+0x10>
 2d4:	08 95       	ret

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
